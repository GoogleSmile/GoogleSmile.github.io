(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{272:function(e,t,n){"use strict";n.r(t);var s=n(38),a=Object(s.a)({},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言","aria-hidden":"true"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),n("p",[e._v("组件是 vue.js最强大的功能之一，而组件实例的作用域是相互独立的，这就意味着不同组件之间的数据无法相互引用。一般来说，组件可以有以下几种关系：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/25/16c28b156ddbf501?w=349&h=278&f=png&s=21122",alt:""}})]),e._v(" "),n("p",[e._v("如上图所示，A 和 B、B 和 C、B 和 D 都是父子关系，C 和 D 是兄弟关系，A 和 C 是隔代关系（可能隔多代）。\n针对不同的使用场景，如何选择行之有效的通信方式？")]),e._v(" "),n("h2",{attrs:{id:"方法一、-props-emit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法一、-props-emit","aria-hidden":"true"}},[e._v("#")]),e._v(" 方法一、 props　/ $emit")]),e._v(" "),n("p",[e._v("父组件A通过props的方式向子组件B传递。")]),e._v(" "),n("p",[n("strong",[e._v("1.父组件向子组件传值")])]),e._v(" "),n("p",[e._v('接下来我们通过一个例子，说明父组件如何向子组件传递值：在子组件Users.vue中如何获取父组件App.vue中的数据 users:["Henry","Bucky","Emily"]')]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//App.vue父组件\n<template>\n  <div id="app">\n    <users v-bind:users="users"></users>//前者自定义名称便于子组件调用，后者要传递数据名\n  </div>\n</template>\n<script>\nimport Users from "./components/Users"\nexport default {\n  name: \'App\',\n  data(){\n    return{\n      users:["Henry","Bucky","Emily"]\n    }\n  },\n  components:{\n    "users":Users\n  }\n}\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('//users子组件\n<template>\n  <div class="hello">\n    <ul>\n      <li v-for="user in users">{{user}}</li>//遍历传递过来的值，然后呈现到页面\n    </ul>\n  </div>\n</template>\n<script>\nexport default {\n  name: \'HelloWorld\',\n  props:{\n    users:{           //这个就是父组件中子标签自定义名字\n      type:Array,\n      required:true\n    }\n  }\n}\n<\/script>\n')])])]),n("p",[e._v("总结：父组件通过props向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed")]),e._v(" "),n("p",[n("strong",[e._v("2.子组件向父组件传值（通过事件形式）")])]),e._v(" "),n("p",[e._v("接下来我们通过一个例子，说明子组件如何向父组件传递值：当我们点击“Vue.js Demo”后，子组件向父组件传递值，文字由原来的“传递的是一个值”变成“子向父组件传值”，实现子组件向父组件值的传递。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 子组件\n<template>\n  <header>\n    <h1 @click="changeTitle">{{title}}</h1>//绑定一个点击事件\n  </header>\n</template>\n<script>\nexport default {\n  name: \'app-header\',\n  data() {\n    return {\n      title:"Vue.js Demo"\n    }\n  },\n  methods:{\n    changeTitle() {\n      this.$emit("titleChanged","子向父组件传值");//自定义事件  传递值“子向父组件传值”\n    }\n  }\n}\n<\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<template>\n  <div id="app">\n    <app-header @titleChanged="updateTitle" ></app-header>//与子组件titleChanged自定义事件保持一致\n   // updateTitle($event)接受传递过来的文字\n    <h2>{{title}}</h2>\n  </div>\n</template>\n<script>\nimport Header from "./components/Header"\nexport default {\n  name: \'App\',\n  data(){\n    return{\n      title:"传递的是一个值"\n    }\n  },\n  methods:{\n    updateTitle(e){   //声明这个函数\n      this.title = e;\n    }\n  },\n  components:{\n   "app-header":Header,\n  }\n}\n<\/script>\n')])])]),n("p",[e._v("总结：子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。")]),e._v(" "),n("h2",{attrs:{id:"方法二、-中央事件总线eventbus"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法二、-中央事件总线eventbus","aria-hidden":"true"}},[e._v("#")]),e._v(" 方法二、 中央事件总线EventBus")]),e._v(" "),n("p",[e._v("对于父子组件之间的通信，上面的方式是完全可以实现的，但是对于两个组件不是父子关系，那么又该如何实现通信呢？在项目规模不大的情况下，完全可以使用中央事件总线 EventBus 的方式。如果你的项目规模是大中型的，那你可以使用我们后面即将介绍的 Vuex 状态管理。\nEventBus的简介\nEventBus 又称为事件总线。在Vue中可以使用 EventBus 来作为沟通桥梁的概念，就像是所有组件共用相同的事件中心，可以向该中心注册发送事件或接收事件，所以组件都可以上下平行地通知其他组件，但也就是太方便所以若使用不慎，就会造成难以维护的灾难，因此才需要更完善的Vuex作为状态管理中心，将通知的概念上升到共享状态层次。")]),e._v(" "),n("p",[e._v("如何使用EventBus\n在Vue的项目中怎么使用 EventBus 来实现组件之间的数据通讯呢？具体可以通过下面几个步骤来完成。")]),e._v(" "),n("p",[e._v("初始化\n首先你需要做的是创建事件总线并将其导出，以便其它模块可以使用或者监听它。我们可以通过两种方式来处理。先来看第一种，新创建一个 .js 文件，比如 eventBus.js ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// eventBus.js\nimport Vue from 'vue'\nexport const EventBus = new Vue()\n")])])]),n("p",[e._v("你需要做的只是引入 Vue 并导出它的一个实例（在这种情况下，我称它为 EventBus ）。实质上它是一个不具备 DOM 的组件，它具有的仅仅只是它实例方法而已，因此它非常的轻便。\n另外一种方式，可以直接在项目中的 main.js 初始化 EventBus ：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// main.js\nVue.prototype.$EventBus = new Vue()\n")])])]),n("p",[e._v("注意，这种方式初始化的 EventBus 是一个 全局的事件总线\n现在我们已经创建了 EventBus ，接下来你需要做到的就是在你的组件中加载它，并且调用同一个方法，就如你在父子组件中互相传递消息一样。")]),e._v(" "),n("p",[e._v("例子：\n在A.vue中触发")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('import EventBus from \'eventBus.js\'; \n// 必须引入同一个实例\n\nmethods： {\n    doSomething() {\n        EventBus.$emit("getTarget", 22);\n        console.log("向getTarget方法传参22");\n    }\n}\n')])])]),n("p",[e._v("B.vue中监听一个事件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import EventBus from 'eventBus.js'; \n// 我们在create钩子中监听方法\ncreate(){\n    console.log(\"this.getTarget是一个带参数的方法，但是这边只要将两者关联起来\");\n    EventBus.$on('getTarget', this.getTarget); \n},\nbeforeDestroy() {\n    console.log(\"组件销毁前需要解绑事件。否则会出现重复触发事件的问题\");\n    EventBus.$off('getTarget', this.getTarget);\n},\nmethods: {\n    getTarget(param) {\n        // todo\n    }\n}\n")])])]),n("p",[e._v("eventBus其实非常方便，任何的组件通信都能用它来完成。但是，我们会根据情况来选择更易维护的方式。因为eventBus比较不好找到对应的监听或者触发事件具体实现的地方，所以一般组件通信更考虑上面的实现方式。在模块之间通信利用eventBus，然后在模块内部，利用vuex通信，维护数据，会在逻辑上比较清晰。")]),e._v(" "),n("h2",{attrs:{id:"方法三、-vuex"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法三、-vuex","aria-hidden":"true"}},[e._v("#")]),e._v(" 方法三、 vuex")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/25/16c28bdfdedb1c3b?w=752&h=457&f=png&s=89662",alt:""}}),e._v(" "),n("strong",[e._v("1.简要介绍Vuex原理")])]),e._v(" "),n("p",[e._v("Vuex实现了一个单向数据流，在全局拥有一个State存放数据，当组件要更改State中的数据时，必须通过Mutation进行，Mutation同时提供了订阅者模式供外部插件调用获取State数据的更新。而当所有异步操作(常见于调用后端接口异步获取更新数据)或批量的同步操作需要走Action，但Action也是无法直接修改State的，还是需要通过Mutation来修改State的数据。最后，根据State的变化，渲染到视图上。")]),e._v(" "),n("p",[n("strong",[e._v("2.简要介绍各模块在流程中的功能：")])]),e._v(" "),n("p",[e._v("Vue Components：Vue组件。HTML页面上，负责接收用户操作等交互行为，执行dispatch方法触发对应action进行回应。")]),e._v(" "),n("p",[e._v("dispatch：操作行为触发方法，是唯一能执行action的方法。")]),e._v(" "),n("p",[e._v("actions：操作行为处理模块,由组件中的 $store.dispatch('action 名称',data1)来触发。然后由commit()来触发mutation的调用 , 间接更新 state。负责处理Vue Components接收到的所有交互行为。包含同步/异步操作，支持多个同名方法，按照注册的顺序依次触发。向后台API请求的操作就在这个模块中进行，包括触发其他action以及提交mutation的操作。该模块提供了Promise的封装，以支持action的链式触发。")]),e._v(" "),n("p",[e._v("commit：状态改变提交操作方法。对mutation进行提交，是唯一能执行mutation的方法。")]),e._v(" "),n("p",[e._v("mutations：状态改变操作方法，由actions中的 commit('mutation 名称')来触发。是Vuex修改state的唯一推荐方法。该方法只能进行同步操作，且方法名只能全局唯一。操作之中会有一些hook暴露出来，以进行state的监控等。")]),e._v(" "),n("p",[e._v("state：页面状态管理容器对象。集中存储Vue components中data对象的零散数据，全局唯一，以进行统一的状态管理。页面显示所需的数据从该对象中进行读取，利用Vue的细粒度数据响应机制来进行高效的状态更新。")]),e._v(" "),n("p",[e._v("getters：state对象读取方法。图中没有单独列出该模块，应该被包含在了render中，Vue Components通过该方法读取全局state对象。")]),e._v(" "),n("p",[n("strong",[e._v("3.具体使用：")])]),e._v(" "),n("p",[e._v("store/index.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import Vuex from 'vuex';\nimport Vue from 'vue';\nVue.use(Vuex);\nconst store = new Vuex.Store({\n    state: {\n        stateName: 'xxxx'\n    },\n    mutations: {\n       mutationsName(state, {params}) {\n           state.stateName = params;\n            console.log(\"只有在mutations中才能直接改变state中的值\")\n       } \n    },\n    actions: {\n        actionName({ state,commit}, {params}) {\n        let actionParam = 'mmm';\n            commit('mutationsName', actionParam );\n            console.log(\" 触发mutation 方法要用commit分发，以此改变state\");\n        }\n    }\n       \n});\nexport default store;\n")])])]),n("p",[e._v("main.js")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("import store from './store/index.js';\nnew Vue({\n  el: '#app',\n  store,\n  console.log(\"将store挂载到vue实例上\")\n  render: h => h(App)\n})\n")])])]),n("p",[e._v("在组件中使用")]),e._v(" "),n("p",[e._v("child.vue js部分")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("**import { mapActions, mapMutations, mapState } from 'vuex';\nexport default {\n    computed: {\n        ...mapState({ stateName })\n    },\n    methods: {\n        ...mapActions(['actionName']),\n        ...mapMutations(['mutationName'])\n        console.log(\"使用辅助函数mapMutations直接将触发函数映射到methods上\")\n    }\n    \n    // 接下来在实例中就可以用this.stateName,this.actionName来调用\n\n}\n")])])]),n("p",[e._v("当兄弟组件很多，涉及到的处理数据庞大的时候，可以用到vuex中的modules，使得结构更加清晰")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("const moduleA = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: { ... },\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n")])])]),n("h2",{attrs:{id:"方法四、-attrs-listeners"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法四、-attrs-listeners","aria-hidden":"true"}},[e._v("#")]),e._v(" 方法四、   attrs/ listeners")]),e._v(" "),n("p",[n("strong",[e._v("1.简介")])]),e._v(" "),n("p",[e._v("多级组件嵌套需要传递数据时，通常使用的方法是通过vuex。但如果仅仅是传递数据，而不做中间处理，使用 vuex 处理，未免有点大材小用。\n父子组件之间的数据传输有一个问题：如果父组件A下面有子组件B，组件B下面有组件C,这时如果组件A想传递数据给组件C怎么办呢？ 如果采用props方法，我们必须让组件A通过prop传递消息给组件B，组件B在通过prop传递消息给组件C；要是组件A和组件C之间有更多的组件，那采用这种方式就很复杂了。Vue 2.4开始提供了attrs和listeners来解决这个问题，能够让组件A之间传递消息给组件C。")]),e._v(" "),n("p",[e._v("官网对 $attrs 的解释如下：")]),e._v(" "),n("pre",[n("code",[e._v('$attrs：包含了父作用域中不被 prop 所识别 (且获取) 的特性绑定 (class 和 style 除外)。当一个组件没有声明任何 prop 时，这里会包含所有父作用域的绑定 (class 和 style 除外)，并且可以通过 v-bind="$attrs" 传入内部组件。通常配合 interitAttrs 选项一起使用。\n')])]),e._v(" "),n("p",[e._v("官网对 $listeners 的解释如下：")]),e._v(" "),n("pre",[n("code",[e._v('$listeners：包含了父作用域中的 (不含 .native 修饰器的) v-on 事件监听器。它可以通过 v-on="$listeners" 传入内部组件\n')])]),e._v(" "),n("p",[e._v("以上是官网对$attrs的解释，我刚看我也是一脸懵逼，回去试了一下其实并不难，而且比较适用组件深层嵌套场景下，祖先组件向子组件传值的问题")]),e._v(" "),n("p",[e._v("我的理解：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("意思就是父组件传向子组件传的，子组件不prop接受的数据都会放在$attrs中，子组件直接用this.$attrs获取就可以了。如过从父->孙传，就在子组件中添加v-bind='$attrs'，就把父组件传来的子组件没props接收的数据全部传到孙组件；我觉得 $attrs 和 $listeners 属性像两个收纳箱，一个负责收纳属性，一个负责收纳事件，都是以对象的形式来保存数据；\n")])])]),n("p",[e._v("接下来我们看个跨级通信的例子：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// index.vue\n<template>\n  <div>\n    <h2>大漠孤烟</h2>\n    <child-com1\n      :foo="foo"\n      :boo="boo"\n      :coo="coo"\n      :doo="doo"\n      @one.native="triggerOne"\n      @two="triggerTwo"\n      title="Vue通信"\n    ></child-com1>\n  </div>\n</template>\n<script>\nconst childCom1 = () => import("./childCom1.vue");\nexport default {\n  components: { childCom1 },\n  data() {\n    return {\n      foo: "Javascript",\n      boo: "Html",\n      coo: "CSS",\n      doo: "Vue"\n    };\n  },\n  methods:{\n    triggerOne(){\n      alert(\'one\')\n    },\n    triggerTwo(){\n      alert(\'two\')\n    }\n  }\n};\n<\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// childCom1.vue\n<template class="border">\n  <div>\n    <p>foo: {{ foo }}</p>\n    <p>childCom1的$attrs: {{ $attrs }}</p>\n    <child-com2 v-bind="$attrs" v-on="$listeners"></child-com2>\n  </div>\n</template>\n<script>\nconst childCom2 = () => import("./childCom2.vue");\nexport default {\n  components: {\n    childCom2\n  },\n  // 默认为true，如果传入的属性子组件没有prop接受，就会以字符串的形式出现为标签属性\n  // 设为false，在dom中就看不到这些属性，试一下就知道了\n  inheritAttrs: false, // 可以关闭自动挂载到组件根元素上的没有在props声明的属性\n  props: {\n    foo: String // foo作为props属性绑定\n  },\n  mounted() {\n    console.log(this.$attrs); // { "boo": "Html", "coo": "CSS", "doo": "Vue", "title": "Vue通信" }\n    console.log(this.$listeners);\n  }\n};\n<\/script>\n\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// childCom2.vue\n<template>\n  <div class="border">\n    <p>boo: {{ boo }}</p>\n    <p>childCom2的$attrs: {{ $attrs }}</p>\n    <child-com3 v-bind="$attrs" v-on="$listeners"></child-com3>\n  </div>\n</template>\n<script>\nconst childCom3 = () => import("./childCom3.vue");\nexport default {\n  components: {\n    childCom3\n  },\n  inheritAttrs: false,\n  props: {\n    boo: String\n  },\n  mounted() {\n    console.log(this.$attrs); // {"coo": "CSS", "doo": "Vue", "title": "Vue通信" }\n    console.log(this.$listeners);\n  }\n};\n<\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// childCom3.vue\n<template>\n  <div class="border">\n    <p>childCom3: {{ $attrs }}</p>\n  </div>\n</template>\n<script>\nexport default {\n  props: {\n    coo: String,\n    title: String\n  },\n  mounted() {\n    console.log(this.$listeners);\n    // this.$listeners.two();\n  }\n};\n<\/script>\n')])])]),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/25/16c28cbb796efae9?w=645&h=254&f=png&s=25022",alt:""}})]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$attrs表示没有继承数据的对象，格式为{属性名：属性值}。Vue2.4提供了 $attrs , $listeners 来传递数据与事件，跨级组件之间的通讯变得更简单。\n简单来说： $attrs与 $listeners 是两个对象， $attrs 里存放的是父组件中绑定的非 Props 属性， $listeners里存放的是父组件中绑定的非原生事件。\n")])])]),n("h2",{attrs:{id:"方法五、-provide-inject-底层的通用组件时，使用频率会很高"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法五、-provide-inject-底层的通用组件时，使用频率会很高","aria-hidden":"true"}},[e._v("#")]),e._v(" 方法五、 provide/inject (底层的通用组件时，使用频率会很高)")]),e._v(" "),n("p",[n("strong",[e._v("1.简介")])]),e._v(" "),n("p",[e._v("Vue2.2.0新增API,这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。一言而蔽之：祖先组件中通过provider提供变量，然后在子孙组件中通过inject来注入变量。provide / inject API 主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。\n来看下官方对 provide / inject 的描述：\nprovide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。并且这对选项需要一起使用，以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。")]),e._v(" "),n("p",[n("strong",[e._v("2.举个例子")])]),e._v(" "),n("p",[e._v("假设有两个组件： A.vue 和 B.vue，B 是 A 的子组件")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// A.vue\nexport default {\n  provide: {\n    name: '大漠孤烟'\n  }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// B.vue\nexport default {\n  inject: ['name'],\n  mounted () {\n    console.log(this.name);  // 大漠孤烟\n  }\n}\n")])])]),n("p",[e._v("可以看到，在 A.vue 里，我们设置了一个 provide: name，值为 大漠孤烟，它的作用就是将 name 这个变量提供给它的所有子组件。而在 B.vue 中，通过 inject 注入了从 A 组件中提供的 name 变量，那么在组件 B 中，就可以直接通过 this.name 访问这个变量了，它的值也是 大漠孤烟。这就是 provide / inject API 最核心的用法。")]),e._v(" "),n("p",[e._v("需要注意的是：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的----vue官方文档。所以，上面 A.vue 的 name 如果改变了，B.vue 的 this.name 是不会改变的，仍然是 大漠孤烟。")]),e._v(" "),n("p",[n("strong",[e._v("3.provide与inject 怎么实现数据响应式")])]),e._v(" "),n("p",[e._v("一般来说，有两种办法：")]),e._v(" "),n("blockquote",[n("p",[e._v("provide祖先组件的实例，然后在子孙组件中注入依赖，这样就可以在子孙组件中直接修改祖先组件的实例的属性，不过这种方法有个缺点就是这个实例上挂载很多没有必要的东西比如props，methods")])]),e._v(" "),n("blockquote",[n("p",[e._v("使用2.6最新API Vue.observable 优化响应式 provide(推荐)\n我们来看个例子：孙组件E 和 获取A组件传递过来的color值，并能实现数据响应式变化，即A组件的color变化后，组件E、F会跟着变（核心代码如下：）")])]),e._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/7/25/16c28ce2cc7827fb?w=728&h=453&f=png&s=67179",alt:""}})]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// A 组件 \n<div>\n      <h1>A 组件</h1>\n      <button @click="() => changeColor()">改变color</button>\n      <ChildrenB />\n      <ChildrenC />\n</div>\n......\n  data() {\n    return {\n      color: "blue"\n    };\n  },\n  // provide() {\n  //   return {\n  //     theme: {\n  //       color: this.color //这种方式绑定的数据并不是可响应的\n  //     } // 即A组件的color变化后，组件E、F 不会跟着变\n  //   };\n  // },\n  provide() {\n    return {\n      theme: this//方法一：提供祖先组件的实例\n    };\n  },\n  methods: {\n    changeColor(color) {\n      if (color) {\n        this.color = color;\n      } else {\n        this.color = this.color === "blue" ? "red" : "blue";\n      }\n    }\n  }\n  // 方法二:使用vue2.6最新API Vue.observable 优化响应式 provide\n  // provide() {\n  //   this.theme = Vue.observable({\n  //     color: "blue"\n  //   });\n  //   return {\n  //     theme: this.theme\n  //   };\n  // },\n  // methods: {\n  //   changeColor(color) {\n  //     if (color) {\n  //       this.theme.color = color;\n  //     } else {\n  //       this.theme.color = this.theme.color === "blue" ? "red" : "blue";\n  //     }\n  //   }\n  // }\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// F 组件 \n<template functional>\n  <div class="border2">\n    <h3 :style="{ color: injections.theme.color }">F 组件</h3>\n  </div>\n</template>\n<script>\nexport default {\n  inject: {\n    theme: {\n      //函数式组件取值不一样\n      default: () => ({})\n    }\n  }\n};\n<\/script>\n')])])]),n("p",[e._v("虽说provide 和 inject 主要为高阶插件/组件库提供用例，但如果你能在业务中熟练运用，可以达到事半功倍的效果！")]),e._v(" "),n("h2",{attrs:{id:"方法六、-parent-children-＆-ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法六、-parent-children-＆-ref","aria-hidden":"true"}},[e._v("#")]),e._v(" 方法六、 parent / children　＆ ref")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$parent / $children：访问父 / 子实例\nref：如果在普通的 DOM 元素上使用，引用指向的就是 DOM 元素；如果用在子组件上，引用就指向组件实例\n")])])]),n("p",[e._v("需要注意的是：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。我们先来看个用 ref来访问组件的例子：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// component-a 子组件\nexport default {\n  data () {\n    return {\n      title: 'Vue.js'\n    }\n  },\n  methods: {\n    sayHello () {\n      window.alert('Hello');\n    }\n  }\n}\n")])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('// 父组件\n<template>\n  <component-a ref="comA"></component-a>\n</template>\n<script>\n  export default {\n    mounted () {\n      const comA = this.$refs.comA;\n      console.log(comA.title);  // Vue.js\n      comA.sayHello();  // 弹窗\n    }\n  }\n<\/script>\n')])])]),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("$parent 和 $children\n")])])]),n("p",[e._v("这里要说的这种方式就比较直观了，直接操作父子组件的实例。$parent 就是父组件的实例对象，而 $children 就是当前实例的直接子组件实例了，不过这个属性值是数组类型的，且并不保证顺序，也不是响应式的。\nparent组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n    <div class="">\n      <p>this is parent component!</p>\n        <button @click="changeChildValue">test</button>\n      <child />\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n        return {\n          message: \'hello\'\n        }\n    },\n    methods: {\n      changeChildValue(){\n        this.$children[0].mymessage = \'hello\';\n      }\n    },\n}\n<\/script>\n\n<style lang="less" scoped>\n</style>\n')])])]),n("p",[e._v("children组件：")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('<template>\n    <div class="">\n      <input type="text" v-model="mymessage" @change="changeValue" />\n    </div>\n</template>\n\n<script>\nexport default {\n    data() {\n      return {\n        mymessage: this.$parent.message\n      }\n    },\n    methods: {\n      changeValue(){\n        this.$parent.message = this.mymessage;//通过如此调用可以改变父组件的值\n        console.log(this.$parent.message)\n      }\n    }\n}\n<\/script>\n\n<style lang="less" scoped>\n</style>\n\n')])])]),n("p",[e._v("不过，这两种方法的弊端是，无法在跨级或兄弟间通信。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// parent.vue\n<component-a></component-a>\n<component-b></component-b>\n<component-b></component-b>\n")])])]),n("p",[e._v("我们想在 component-a 中，访问到引用它的页面中（这里就是 parent.vue）的两个 component-b 组件，那这种情况下，就得配置额外的插件或工具了，比如 Vuex 和 Bus 的解决方案。")]),e._v(" "),n("h2",{attrs:{id:"总结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#总结","aria-hidden":"true"}},[e._v("#")]),e._v(" 总结")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("常见使用场景可以分为三类：\n父子通信： 父向子传递数据是通过 props，子向父是通过 events（ $emit）；通过父链 / 子链也可以通信（ $parent / $children）；ref 也可以访问组件实例；provide / inject API； $attrs/$listeners\n兄弟通信： Bus；Vuex\n跨级通信： Bus；Vuex；provide / inject API、 $attrs/$listeners\n")])])])])},[],!1,null,null,null);t.default=a.exports}}]);